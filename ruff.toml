# This is a configuration file for Ruff, a Python linter and code formatter.
# It specifies the target Python version, line length, exclusion rules, and linting/formatting options, among others.

# For more information about how Ruff is configured, refer to:
# https://docs.astral.sh/ruff/configuration/

# For a complete enumeration of the available configuration options, refer to:
# https://docs.astral.sh/ruff/settings/

# For a complete enumeration of the available rule set, refer to:
# https://docs.astral.sh/ruff/rules/

# The minimum Python version to target, e.g., when considering automatic code upgrades, like rewriting type annotations.
target-version = "py311"

# The line length to use when enforcing long-lines violations (like 'E501') and at which isort and the formatter prefers to wrap lines.
line-length = 125

# Whether to enforce 'exclude' and 'extend-exclude' patterns, even for paths that are passed to Ruff explicitly.
force-exclude = true

[lint]

# A list of rule codes or prefixes to enable, in addition to those specified by 'select'.
extend-select = [
  # flake8-bugbear
  # mutable-argument-default - Do not use mutable data structures for argument defaults.
  "B006",
  # pydocstyle
  "D",
  # flake8-datetimez
  "DTZ",
  # pycodestyle
  "E",
  # pyflakes
  "F",
  # flake8-logging-format
  # logging-warn - Logging statement uses warn instead of warning.
  "G010",
  # isort
  "I",
  # flake8-no-pep420
  "INP",
  # flake8-pytest-style
  "PT",
  # Ruff-specific rules
  # explicit-f-string-type-conversion - Use explicit conversion flag.
  "RUF010",
  # unused-noqa - Unused 'noqa' directive.
  "RUF100",
  # flake8-tidy-imports
  "TID",
  # pyupgrade
  "UP",
  # Open file with context handler.
  "SIM115",
]

# A list of rule codes or prefixes to ignore.
ignore = [
  # pydocstyle
  # undocumented-public-module - Missing docstring in public module.
  "D100",
  # undocumented-public-class - Missing docstring in public class.
  "D101",
  # undocumented-public-method - Missing docstring in public method.
  "D102",
  # undocumented-public-function - Missing docstring in public function.
  "D103",
  # undocumented-public-package - Missing docstring in public package.
  "D104",
  # undocumented-magic-method - Missing docstring in magic method.
  "D105",
  # undocumented-public-nested-class - Missing docstring in public nested class.
  "D106",
  # undocumented-public-init - Missing docstring in __init__.
  "D107",
  # one-blank-line-before-class - 1 blank line required before class docstring.
  # This configuration can't be enabled as it's incompatible with 'D211' (no-blank-line-before-class).
  "D203",
  # blank-line-after-summary - 1 blank line required between summary line and description.
  # This configuration can't be enabled because automatic fix available is minimal.
  "D205",
  # non-imperative-mood - First line of docstring should be in imperative mood: "{first_line}".
  "D401",
  # one-blank-line-after-class - 1 blank line required after class docstring.
  "D402",
  # docstring-starts-with-this - First word of the docstring should not be "This".
  "D404",
  # multi-line-summary-second-line - Multi-line docstring summary should start at the second line.
  # This configuration can't be enabled as it's incompatible with 'D212' (multi-line-summary-first-line).
  "D213",
  # undocumented-param - Missing argument description in the docstring for {definition}: {name}.
  "D417",
  # pycodestyle
  # bare-except - Do not use bare except.
  "E722",
  # line-too-long - Line too long ({width} > {limit}).
  "E501",
  # flake8-pytest-style
  # pytest-missing-fixture-name-underscore - Fixture '{function}' does not return anything, add leading underscore.
  "PT004",
  # pytest-incorrect-fixture-name-underscore - Fixture '{function}' returns a value, remove leading underscore.
  "PT005",
  # pytest-parametrize-values-wrong-type - Wrong values type in '@pytest.mark.parametrize' expected '{values}' of '{row}'.
  "PT007",
  # pytest-raises-too-broad - 'pytest.raises({exception})' is too broad, set the 'match' parameter or use a more specific exception.
  "PT011",
  # pytest-raises-with-multiple-statements - 'pytest.raises()' block should contain a single simple statement.
  "PT012",
  # pytest-incorrect-pytest-import - Found incorrect import of pytest, use simple 'import pytest' instead.
  "PT013",
  # pytest-assert-in-except - Found assertion on exception '{name}' in 'except' block, use 'pytest.raises()' instead.
  "PT017",
  # pytest-fixture-param-without-value - Fixture '{name}' without value is injected as parameter, use '@pytest.mark.usefixtures' instead.
  "PT019",
  # pyupgrade
  # printf-string-formatting - Use format specifiers instead of percent format.
  "UP031",
  # f-string - Use f-string instead of 'format' call.
  # This configuration can't be enabled since certain operations in f-strings are forbidden.
  # For further details, refer to: 'ci/check_string_formats.py'.
  "UP032",
]

# A list of rule codes or prefixes for which unsafe fixes should be considered safe.
extend-safe-fixes = [
  # pydocstyle
  "D"
]

[lint.pydocstyle]
convention = "google"

[lint.isort]

# Combines as imports on the same line.
combine-as-imports = true

# Whether to place import from imports before straight imports when sorting.
from-first = true

# The number of lines to place between "direct" and 'import from' imports.
lines-between-types = 1

# Put all imports into the same section bucket.
# This configuration breaks the Python convention.
no-sections = true

# Order imports by type, which is determined by case, in addition to alphabetically.
order-by-type = false
